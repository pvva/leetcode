package main

import (
	"fmt"
	"math/rand"
)

func main() {
	inp := []int{188, 927, 949, 95, 151, 659, 405, 906, 481, 363, 728, 839}
	s := Constructor(inp)

	exp := []int{7, 7, 10, 2, 7, 2, 11, 7, 5, 8, 7, 11, 2, 1, 7, 11, 11, 0, 4, 1, 11, 7, 5, 5, 10, 11, 2, 1, 11, 10, 7, 7, 10, 11, 2, 2, 5, 2, 1, 6, 1, 8, 10, 7, 5, 1, 0, 5, 7, 8, 11, 1, 8, 1, 6, 5, 8, 2, 10, 11, 6, 11, 7, 8, 2, 11, 2, 10, 2, 10, 5, 2, 0, 8, 10, 2, 11, 10, 11, 1, 5, 6, 10, 10, 5, 7, 10, 1, 11, 7, 7, 11, 5, 5, 9, 1, 6, 6, 11, 5, 11, 2, 8, 5, 1, 5, 7, 7, 2, 5, 10, 10, 0, 6, 11, 7, 8, 7, 2, 9, 10, 1, 2, 7, 2, 5, 10, 2, 10, 11, 5, 11, 7, 1, 1, 11, 2, 11, 2, 6, 6, 11, 0, 1, 5, 10, 2, 2, 7, 10, 8, 2, 6, 5, 1, 5, 1, 8, 5, 1, 11, 6, 9, 5, 5, 7, 0, 5, 5, 4, 4, 11, 2, 6, 7, 2, 2, 10, 5, 5, 11, 6, 10, 11, 5, 5, 7, 10, 9, 5, 10, 10, 1, 0, 1, 7, 6, 2, 1, 6, 8, 5, 10, 10, 11, 2, 5, 7, 11, 8, 1, 7, 2, 7, 0, 9, 0, 7, 6, 7, 10, 8, 11, 8, 8, 11, 5, 1, 8, 2, 4, 4, 7, 2, 2, 1, 5, 9, 5, 2, 8, 1, 2, 2, 1, 7, 9, 1, 3, 6, 2, 5, 5, 2, 10, 10, 9, 7, 1, 2, 8, 9, 5, 8, 11, 11, 10, 3, 5, 10, 9, 2, 7, 2, 7, 6, 1, 6, 3, 7, 1, 2, 1, 6, 7, 1, 9, 7, 1, 1, 2, 1, 2, 1, 2, 2, 5, 0, 8, 7, 7, 1, 2, 2, 10, 5, 9, 1, 7, 11, 4, 2, 5, 2, 8, 1, 1, 8, 9, 5, 7, 2, 6, 11, 10, 11, 11, 5, 8, 2, 1, 11, 6, 10, 4, 6, 2, 0, 7, 5, 6, 9, 2, 11, 5, 6, 9, 11, 2, 6, 11, 11, 2, 5, 8, 11, 7, 8, 10, 11, 6, 9, 7, 11, 5, 2, 6, 5, 8, 2, 10, 4, 7, 10, 11, 7, 2, 10, 7, 5, 2, 1, 11, 1, 10, 9, 7, 9, 7, 2, 11, 11, 11, 2, 9, 10, 1, 5, 6, 10, 7, 11, 10, 7, 1, 2, 2, 9, 8, 11, 11, 7, 11, 2, 0, 2, 1, 0, 2, 2, 2, 1, 8, 9, 1, 9, 1, 11, 1, 10, 6, 8, 2, 5, 5, 5, 5, 5, 5, 9, 7, 10, 9, 6, 2, 0, 2, 5, 6, 9, 3, 11, 5, 7, 8, 11, 1, 11, 8, 2, 1, 1, 11, 0, 7, 7, 6, 7, 2, 9, 9, 7, 2, 11, 11, 7, 11, 6, 1, 11, 1, 10, 8, 6, 9, 9, 7, 5, 4, 2, 2, 11, 5, 2, 5, 1, 7, 1, 2, 9, 11, 11, 1, 5, 7, 0, 11, 7, 7, 1, 1, 10, 2, 7, 7, 9, 2, 2, 10, 11, 11, 8, 1, 5, 2, 9, 5, 9, 1, 2, 9, 2, 10, 2, 7, 10, 6, 2, 8, 7, 1, 1, 1, 10, 1, 7, 10, 2, 10, 11, 1, 7, 10, 1, 6, 7, 7, 6, 6, 8, 7, 7, 5, 8, 5, 1, 4, 7, 5, 11, 2, 11, 2, 10, 2, 6, 9, 7, 11, 1, 5, 10, 7, 7, 10, 9, 1, 7, 9, 7, 1, 10, 3, 1, 1, 7, 3, 7, 1, 11, 1, 2, 10, 9, 11, 10, 9, 11, 2, 10, 1, 11, 9, 8, 7, 11, 11, 4, 5, 7, 0, 7, 6, 9, 2, 11, 9, 2, 1, 6, 10, 2, 2, 1, 8, 11, 8, 1, 9, 9, 1, 8, 2, 7, 11, 11, 11, 1, 10, 5, 0, 5, 5, 9, 10, 11, 0, 10, 1, 8, 1, 11, 7, 7, 2, 1, 7, 11, 10, 6, 10, 6, 8, 1, 0, 7, 10, 10, 2, 1, 7, 11, 2, 6, 6, 1, 8, 3, 2, 7, 5, 5, 0, 5, 10, 1, 8, 5, 1, 1, 1, 11, 7, 2, 9, 1, 7, 1, 8, 2, 0, 5, 11, 10, 8, 11, 11, 10, 2, 6, 2, 10, 1, 3, 7, 2, 11, 2, 6, 11, 11, 1, 10, 0, 1, 8, 10, 2, 10, 7, 7, 7, 11, 4, 7, 1, 11, 3, 9, 7, 11, 10, 10, 2, 7, 9, 2, 1, 7, 6, 10, 6, 2, 9, 5, 2, 2, 7, 1, 2, 7, 2, 6, 5, 7, 1, 7, 1, 10, 11, 7, 4, 10, 11, 1, 9, 7, 5, 11, 1, 1, 2, 8, 7, 11, 11, 2, 9, 7, 8, 10, 2, 1, 1, 2, 5, 6, 7, 2, 11, 2, 2, 5, 2, 2, 6, 2, 11, 2, 0, 11, 10, 11, 7, 10, 10, 5, 8, 5, 1, 0, 5, 10, 11, 5, 10, 7, 7, 2, 2, 1, 7, 5, 6, 2, 8, 2, 9, 11, 2, 11, 1, 2, 7, 7, 7, 2, 8, 2, 1, 9, 11, 11, 8, 7, 5, 7, 7, 10, 8, 5, 5, 8, 2, 7, 10, 7, 7, 0, 2, 0, 5, 5, 7, 10, 2, 2, 7, 7, 6, 2, 1, 6, 2, 5, 1, 7, 7, 0, 7, 7, 1, 8, 9, 5, 2, 7, 10, 0, 8, 10, 2, 5, 1, 6, 2, 7, 7, 1, 10, 10, 5, 2, 7, 10, 2, 10, 1, 7, 0, 8, 1, 11, 2, 11, 7, 10, 1, 1, 9, 10, 7, 11, 5, 7, 5, 7, 3, 11, 1, 6, 1, 1, 4, 1, 2, 2, 1, 1, 11, 1, 1, 11, 4, 7, 1, 11, 10, 1, 9, 3, 9, 2, 11, 2, 11, 2, 0, 2, 7, 7, 8, 10, 2, 1, 5, 2, 8, 4, 10, 11, 10, 6, 7, 10, 5, 8, 4, 8, 10}

	expRes := make([]int, len(inp))
	for _, i := range exp {
		expRes[i]++
	}

	fmt.Println(inp)
	fmt.Println(expRes)

	myRes := make([]int, len(inp))
	for range exp {
		i := s.PickIndex()
		myRes[i]++
	}

	fmt.Println(myRes)
}

/*
https://leetcode.com/problems/random-pick-with-weight/

Given an array w of positive integers, where w[i] describes the weight of index i, write a function
pickIndex which randomly picks an index in proportion to its weight.

Note:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.

Example 1:

Input:
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]

Example 2:

Input:
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]

Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument,
the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.
*/

/**
 * Your Solution object will be instantiated and called as such:
 * obj := Constructor(w);
 * param_1 := obj.PickIndex();
 */
type Solution struct {
	distribution [10000]int
}

func Constructor(w []int) Solution {
	s := Solution{}
	sum := 0
	for _, v := range w {
		sum += v
	}
	idx := 0
	for i, v := range w {
		amnt := 10000 * v / sum
		for j := 0; j < amnt; j++ {
			s.distribution[idx] = i
			idx++
		}
	}

	return s
}

func (this *Solution) PickIndex() int {
	return this.distribution[rand.Intn(len(this.distribution))]
}
